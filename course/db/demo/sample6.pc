#ifdef RCSID
static char *RCSid = 
   "$Header: sample6.pc 1041300.1 93/05/05 16:00:54 jboyce Generic<base> $ sample6.pc ";
#endif /* RCSID */

/**************************************************************
Sample Program 6:  Dynamic SQL Method 1

This program uses dynamic SQL Method 1 to create a table,
insert a row, commit the insert, then drop the table.
**************************************************************/

#define USERNAME "SCOTT"
#define PASSWORD "TIGER"
#include <stdio.h>
#include <string.h>

/* Include the SQL Communications Area, a structure through
   which ORACLE makes runtime status information such as error
   codes, warning flags, and diagnostic text available to the
   program. */

EXEC SQL INCLUDE sqlca;

/* Include the ORACLE Communications Area, a structure through
   which ORACLE makes additional runtime status information
   available to the program. */

EXEC SQL INCLUDE oraca;

/* The ORACA=YES option must be specified to enable you
   to use the ORACA. */

EXEC ORACLE OPTION (ORACA=YES);

/* Specifying the RELEASE_CURSOR=YES option instructs Pro*C
   to release resources associated with embedded SQL
   statements after they are executed.  This ensures that
   ORACLE does not keep parse locks on tables after data
   manipulation operations, so that subsequent data definition
   operations on those tables do not result in a parse-lock
   error. */

EXEC ORACLE OPTION (RELEASE_CURSOR=YES);

/* All host variables used in embedded SQL must appear in the
   Declare Section. */

EXEC SQL BEGIN DECLARE SECTION;
    char    *username = USERNAME;
    char    *password = PASSWORD;
    char    *sqlstmt1;
    char     sqlstmt2[10];
    VARCHAR  sqlstmt3[80];
EXEC SQL END DECLARE SECTION;

main()
{
    /* Branch to label "sqlerror" if an ORACLE error occurs. */

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    /* Save text of current SQL statement in the ORACA if an
       error occurs. */

    oraca.orastxtf = ORASTFERR;

    /* Connect to ORACLE. */

    EXEC SQL CONNECT :username IDENTIFIED BY :password;
    puts("\nConnected to ORACLE.\n");

    /* Execute a string literal to create the table.  This
       usage is actually not dynamic because the program does
       not determine the SQL statement at run time. */

    puts("CREATE TABLE DYN1 (COL1 CHAR(4))");
    EXEC SQL EXECUTE IMMEDIATE "CREATE TABLE DYN1 (COL1 CHAR(4))";

    /* Execute a char pointer to insert a row.  The string must
       be null-terminated.  This usage is dynamic because the
       SQL statement is a string variable whose contents the
       program can determine at run time. */

    sqlstmt1 = "INSERT INTO DYN1 VALUES ('TEST')";
    puts(sqlstmt1);
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt1;

    /* Execute a char array to commit the insert.  Pad the
       unused trailing portion of the array with spaces.  Do
       NOT null-terminate it. */

    strncpy(sqlstmt2, "COMMIT    ", 10);
    printf("%.10s\n", sqlstmt2);
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt2;

    /* Execute a VARCHAR to drop the table.  Set the .len field
       to the length of the .arr field. */
    strcpy((char *) sqlstmt3.arr, "DROP TABLE DYN1");
    sqlstmt3.len = strlen((char *) sqlstmt3.arr);
    puts((char *) sqlstmt3.arr);
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt3;

    /* Commit any outstanding changes and disconnect from
       ORACLE. */

    EXEC SQL COMMIT RELEASE;
    puts("\nHave a good day!\n");
    exit(0);

sqlerror:

    /* This is the ORACLE error handler.
       Print diagnostic text containing the error message,
       current SQL statement, and location of error. */

    printf("\n%.*s\n", sqlca.sqlerrm.sqlerrml,
                       sqlca.sqlerrm.sqlerrmc);
    printf("in \"%.*s...\"\n", oraca.orastxt.orastxtl,
                               oraca.orastxt.orastxtc);
    printf("on line %d of %.*s.\n\n", oraca.oraslnr,
                                      oraca.orasfnm.orasfnml,
                                      oraca.orasfnm.orasfnmc);

    /* Disable ORACLE error checking to avoid an infinite loop
       should another error occur within this routine as a 
       result of the rollback. */

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    /* Roll back any pending changes and disconnect from
       ORACLE. */

    EXEC SQL ROLLBACK RELEASE;
    exit(1);
}
